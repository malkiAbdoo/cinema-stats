// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
  images        Image[]
  albums        Album[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id         Int     @unique
  userId     String  @map("user_id")
  src        String  @db.Text
  avgColor   String  @map("avg_color")
  width      Int
  height     Int
  isFavorite Boolean @default(false) @map("is_favorite")
  albumName  String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  album      Album   @relation(fields: [albumName, userId], references: [name, userId], onDelete: Cascade)

  @@unique([id, userId])
  @@index([albumName, userId])
  @@index([userId])
  @@map("images")
}

model Album {
  name   String
  userId String  @map("user_id")
  images Image[]
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
  @@map("albums")
}

model Activity {
  userId String       @map("user_id")
  date   DateTime     @default(now())
  type   ActivityType
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("activities")
}

enum ActivityType {
  SEARCH
  DOWNLOAD
}
